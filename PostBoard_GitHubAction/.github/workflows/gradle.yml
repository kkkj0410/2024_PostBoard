name: Java CI with Gradle2

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  DOCKER_IMAGE_NAME: testimage
  EC2_HOST: ec2-3-38-186-97.ap-northeast-2.compute.amazonaws.com
  EC2_SSH_USER: ec2-user
  PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

jobs:
  build-and-push-docker:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Set up application.yml
      run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml

    - name: Grant execute permission for gradlew
      run: sudo chmod +x ./gradlew  # gradlew에 실행 권한 부여
      
    - name: Build with Gradle (Skip Tests)
      run: ./gradlew build -x test

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Login to Docker Hub using Access Token
      run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_NAME }} --password-stdin

    - name: Push the Docker image
      run: |
          docker image tag ${{ env.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_NAME }}/${{ env.DOCKER_IMAGE_NAME }}
          docker push ${{ secrets.DOCKER_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ec2-3-38-186-97.ap-northeast-2.compute.amazonaws.com # EC2 인스턴스 퍼블릭 DNS
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }} # pem 키
        # 도커 작업
        script: |
          sudo docker ps --filter "name=backend" --format "{{.Names}}" | xargs -r sudo docker stop
          sudo docker ps --filter 'status=exited' -a -q | xargs -r sudo docker rm
          sudo docker images --filter=reference='${{ secrets.DOCKER_NAME }}/${{ env.DOCKER_IMAGE_NAME }}*' -q | xargs -r sudo docker rmi
          sudo docker login -u ${{ secrets.DOCKER_NAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
          sudo docker pull ${{ secrets.DOCKER_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          sudo docker run -d \--name backend \--link mysqldb \-e SPRING_DATASOURCE_URL=jdbc:mysql://mysqldb:3306/yogoyogu \-e SPRING_DATASOURCE_USERNAME=root \-e SPRING_DATASOURCE_PASSWORD=root \-p 8080:8080 \${{ secrets.DOCKER_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
